#!/usr/bin/env node
'use strict';
var path = require('path');
var fs = require('fs');
var xml2js = require('xml2js');
var _ = require('lodash');

var rootDir = path.dirname(__dirname);

var filePaths = {
  plugin: [path.join(rootDir, 'plugin.xml'), path.join(rootDir, 'tests', 'plugin.xml')],
  gradle: path.join(rootDir, 'src', 'android', 'pushlink-android.gradle'),
  java: path.join(rootDir, 'src', 'android', 'PushlinkPlugin.java')
};

var packageJsonFile = path.join(rootDir, 'package.json');

var regexes = {
  plugin: /[\d\.]+(-dev)?/g,
  java: /(\s*public static final String VERSION = ")([\d\.]+)(";)/g,
  gradle: /(\s*compile "com\.pushlink:pushlink-android:)([\d\.]+)(")/g
};

var version = JSON.parse(fs.readFileSync(packageJsonFile)).version;
console.log('package.json version: ' + version);

function writeCallback(writeError) {
  if (writeError) {
    console.error('Error writing file', writeError);
  }
}

function updateVersionOnXmlFile(filePath, err, result) {
  if (err) {
    console.error(err);
    return;
  }

  var currentVersion = result.plugin.$.version;
  var newVersion = currentVersion.replace(regexes.plugin, function (match, devSuffix) {
    return devSuffix ? version + devSuffix : version;
  });

  if (currentVersion === newVersion) {
    console.log('Versions are the same on %s (%s), skipping file update', path.relative(rootDir, filePath), currentVersion);
    return;
  }

  console.log('Updating plugin version: %s -> %s', currentVersion, newVersion);
  result.plugin.$.version = newVersion;

  var builder = new xml2js.Builder();
  var xml = builder.buildObject(result);
  fs.writeFile(filePath, xml, 'utf8', writeCallback);
}

function bumpVersionOnFile(filePath, err, data) {
  if (err) {
    console.error(err);
    return;
  }

  xml2js.parseString(data, _.partial(updateVersionOnXmlFile, filePath));
}

filePaths.plugin.forEach(function(configFile) {
  fs.readFile(configFile, _.partial(bumpVersionOnFile, configFile));
});

function updateFileRegex(id, versionPos) {
  var filePath = filePaths[id];
  fs.readFile(filePath, 'utf8', function(err, contents) {
    if (err) {
      console.error(err);
      return;
    }

    var newContents = contents.replace(regexes[id], function() {
      var args = Array.prototype.slice.call(arguments, 1, arguments.length - 2);
      args.splice(versionPos, 1, version);
      return args.join('');
    });

    if (newContents === contents) {
      console.log('Skipping %s update. Same version %s', path.basename(filePath), version);
      return;
    }
    console.log(newContents);

    fs.writeFile(filePath, newContents, 'utf8', writeCallback);
  });
}

updateFileRegex('gradle', 1);
updateFileRegex('java', 1);
